/////////////////////////////////////////////////////////////////////////// using DFS //////////////////////////////////////////////////////////////////////////////

class Solution {
  public:
    bool dfs(vector<int>& vis, vector<int>& path_vis, vector<int> adj[], int node)
    {
        vis[node] = 1 ;                                                                     // mark visited
        path_vis[node] = 1 ;                                                                    // mark path visited
        
        for(int i:adj[node])
        {
            if(vis[i] == 0)
            {
                if(dfs(vis, path_vis, adj, i) == true)                                    // return true if we get true from future calls of dfs
                    return true ;
            }
            else if(path_vis[i] == 1)                                                   // if node is visited and path visited both, then cycle exists
                return true ;
        }
        
        path_vis[node] = 0 ;                                                                  // demark path visited while backtracking (happens when cycle is not detected)
        return false ;  
    }
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V, 0) ;
        vector<int> path_vis(V, 0) ;
        
       for(int i=0; i<V; i++)                                       // we run loop for the case of unconnected graphs with mutliple components
       {
            if(vis[i] == 0)
            {
                if(dfs(vis, path_vis, adj, i))                            // if any 1 component of non connected graph has a cycle, the graph is said to have a cycle
                    return true ;
            }
       }
       
       return false ;
    }
};


////////////////////////////////////////////////////////////////////// using BFS(Kahn's algo)////////////////////////////////////////////////////////////////////////

we apply topological sort to the graph. we know its only applicable to directed ACYCLIC graph. so if size of res (after topo sort) is less than V then it has cycle.

class Solution {
  public:
    
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> indeg(V, 0) ;
        queue<int> q ;
        
        for(int i=0; i<V; i++)
        {
            for(int j:adj[i])
                indeg[j]++ ;
        }
        
        for(int i=0; i<V; i++)
        {
            if(indeg[i] == 0)
                q.push(i) ;
        }
        
        vector<int> res ;
        while(!q.empty())
        {
            int a = q.front() ;
            q.pop() ;
            res.push_back(a) ;
            
            for(int i:adj[a])
            {
                indeg[i]-- ;
                if(indeg[i] == 0)
                    q.push(i) ;
            }
        }
        
        if(res.size() < V)                                            // if size of topo ordering is less than V, then it has cycle
            return true ;
            
        return false ;                                                    //otherwise it isnt cyclic
    }
       
};
