class Solution {
  public:
    void dfs(vector<vector<int>>& vis, vector<vector<int>>& grid, int base_i, int base_j, 
            vector<pair<int, int>>& v, int row, int col)                                                          // passing grid as reference since if passed directly, for each dfs call new copy of grid will be created and this leads to TLE for large testcases
    {
        int n = grid.size() ;
        int m = grid[0].size() ;
        
        vis[row][col] = 1 ;
        v.push_back(make_pair(row - base_i, col - base_j)) ;                                // subtract base row and col index from current row and col index
        
        int temp[] = {-1, 0, 1, 0, -1} ;
        
        for(int it=0; it<4; it++)
        {
            int new_r = row + temp[it] ;
            int new_c = col + temp[it+1] ;
            
            if(new_r>=0 && new_r<n && new_c>=0 && new_c<m && vis[new_r][new_c] == 0 &&
                grid[new_r][new_c] == 1)
            {
                dfs(vis, grid, base_i, base_j, v, new_r, new_c) ;
            }
            
        }
        
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size() ;
        int m = grid[0].size() ;
        vector<vector<int>> vis (n, vector<int>(m, 0)) ;                        
        
        set<vector<pair<int, int>>> st ;                                                              // set {vector {row, col}}
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            { 
                if(vis[i][j] == 0 && grid[i][j] == 1)                                           // if not visited, and grid cell is 1
                { 
                    vector<pair<int, int>> v ;                                                          // vector stores shape of island (coordinates of cells)
                    dfs(vis, grid, i, j, v, i, j) ;                                                   // dfs (vis, grid, base row index, base col index, v, row, col)
                    st.insert(v) ;                                                              // only distinct shaped islands will be saved
                }
            }
        }
            
        return st.size() ;
    }
};
