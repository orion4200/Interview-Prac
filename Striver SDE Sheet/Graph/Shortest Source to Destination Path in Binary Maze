logic -> modified djikstra algo with queue
      -> valid func - will check if index is inside bounds and if cell has 1, if yes it returns true and also marks that cell to make it visited


class Solution {
  public:
    bool valid(vector<vector<int>>& A, int N, int M, int i, int j)
    {
        if(i > N-1 || i < 0 || j > M-1 || j < 0)              // if index out of bound return false
            return 0 ;
            
        if(A[i][j] == 0)                                      // if cell has 0 return false
            return 0 ;          
            
        A[i][j] = 0 ;                                    // to mark it visited
            
        return 1 ;
    }
    vector<pair<int, int>> steps = {{1,0}, {0,1}, {-1,0}, {0,-1}} ;                // for traversing up down left right
    
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
        if(A[0][0] == 0 || A[X][Y] == 0)                                // if starting or ending cell has 0
            return -1 ;
            
        queue<vector<int>> q ;
        q.push({0,0,0}) ;                         // i,j,distance
        
        while(!q.empty())
        {
            auto n = q.front(); q.pop() ;
            
            int i = n[0], j = n[1], d = n[2] ;
            
            if(i == X && j == Y )              // if ending cell reached
                return d ;
            
            for(auto it:steps)                  // check all 4 adjacent cells
            {
                int r = i + it.first ;        // new indexes
                int c = j + it.second ;
                
                if(valid(A, N, M, r, c))        // if new index is valid cell
                {
                    q.push({r, c, d+1}) ;        // push into queue with incr distance
                }
            }
            
        }
        
        return -1 ;
    }
};
