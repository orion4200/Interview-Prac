class Solution {
  public:
    bool detect(vector<int> adj[], vector<int>& vis, int start)
    {
        queue<pair<int, int>> q ;                                     // {node, parent node}
        q.push(make_pair(start, -1)) ;                              // -1 is assumed as parent node for first node
        vis[start] = 1 ;
        
        while(!q.empty())
        {
            auto np = q.front() ;
            q.pop() ;
            int parent = np.second ;
            
            for(auto i:adj[np.first])
            {
                if(vis[i] == 0)
                {
                    q.push(make_pair(i, np.first)) ;
                    vis[i] = 1 ;
                }
                else if(i != parent)                                  // if the node connected to np is visited and not its parent, then graph has a cycle
                {
                    return true ;
                }
            }
        }
        return false ;
    }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> vis(V, 0) ;                             // visited array
        
        for(int i=0; i<V; i++)                              // we run loop for the case of unconnected graphs
        {
            if(vis[i] == 0)
            {
                if(detect(adj, vis, i))                                 // if any 1 component of non connected graph has a cycle, the graph is said to have a cycle
                    return true ;
            }
        }
        return false ;
    }
};
