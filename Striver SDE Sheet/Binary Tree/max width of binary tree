class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)
            return 0 ;

        int res=0 ;
        queue<pair<TreeNode*, int>> q ;

        q.push(make_pair(root, 0)) ;

        while(!q.empty())
        {
            int n = q.size() ;

            int diff = q.back().second - q.front().second ;                                 // diff of numbers(index) given to last and first node of that level (i.e. width of that level)
            res = max(res, diff+1) ;

            while(n--)
            {
                auto p = q.front() ;
                q.pop() ;
                int ind = p.second  ;                                                        // index of that node

                if(p.first->left)
                    q.push(make_pair(p.first->left, (long long)2*ind+1)) ;                   // index of lchild of node is 2*index of node + 1
                                                                                              // we typecast to ll as 2^32 will result in int overflow
                if(p.first->right)
                    q.push(make_pair(p.first->right, (long long)2*ind+2)) ;                  // index of rchild of node is 2*index of node + 2 
            }
        }
        return res ;
    }
};
