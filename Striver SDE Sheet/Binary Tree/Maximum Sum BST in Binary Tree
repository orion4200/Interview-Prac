class Solution {
public:
    vector<int> solve(TreeNode* root, int& ans)
    {
        if(root == NULL)
            return {1, INT_MIN, INT_MAX, 0} ;                   // ds -> [checkbst, max value, min value, max sum]

        vector<int> l(4,0), r(4,0) ;                           // for lchild and rchild

        l = solve(root->left, ans) ;                          // postorder traversal
        r = solve(root->right, ans) ;

        if(l[0] == 1 && r[0] == 1 && root->val < r[2] && root->val > l[1])            // if both child are bst, max value of left < root val < min val of right subtree then it is a valid bst
        {
            ans = max(ans, l[3] + r[3] + root->val) ;                                             // max sum = max sum from left + from right + root val
            return {1, max(root->val, r[1]), min(root->val, l[2]), l[3] + r[3] + root->val} ;
        }
        else
            return {0, 0, 0, max(l[3], r[3])} ;
        

    }
    int maxSumBST(TreeNode* root) {
        int ans=0; 
        vector<int> t = solve(root, ans) ;
        return ans ;
        
    }
};


////////////////////////////////////////////////////////////// faster soln same logic///////////////////////////////////

class Solution {
    struct S {
        bool isBST;
        int minVal, maxVal, sum;
    };
    
    S helper(TreeNode *node, int &res) {
        if (!node) 
        {
            return { true, INT_MAX, INT_MIN, 0 };
        }
        S l = helper(node->left, res);
        S r = helper(node->right, res);

        if (l.isBST && r.isBST && l.maxVal < node->val && r.minVal > node->val) 
        {
            int sum = l.sum + r.sum + node->val;
            res = max(res, sum);
            return { true, min(l.minVal, node->val), max(r.maxVal, node->val), sum };
        } 
        else 
        {
            return { false, 0, 0, 0 };
        }
    }
public:
    int maxSumBST(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
};
