/////////////////////////////////////////////////////////////////// recursive approach ////////////////////////////////////////////////////////////////////////
class Solution {
public:
    TreeNode* prev = NULL ;
    void flatten(TreeNode* root) {
        if(!root)
            return ; 
        
        flatten(root->right) ;
        flatten(root->left) ;

        root->right = prev ;
        root->left = NULL ;
        prev = root ;
    }
};

////////////////////////////////////////////////////////////////// iterative soln ////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    //TreeNode* prev = NULL ;
    void flatten(TreeNode* root) {
    if(!root)
            return ;

        stack<TreeNode*> st ;
        st.push(root) ;

        while(!st.empty())
        {
            TreeNode* cur = st.top(); st.pop() ;

            if(cur->right)
                st.push(cur->right) ;
            if(cur->left)
                st.push(cur->left) ;
            
            if(!st.empty())
                cur->right = st.top() ;

            cur->left = NULL ;
        }
    }
};

///////////////////////////////////////////////////////////////////// o(1) approach ////////////////////////////////////////////////////////////////////

class Solution {
public:
    //TreeNode* prev = NULL ;
    void flatten(TreeNode* root) {
    TreeNode* cur = root ;

        while(cur != NULL)
        {
            if(cur->left)
            {
                TreeNode* prev = cur->left ;
                
                while(prev->right)
                    prev = prev->right ;

                prev->right = cur->right ;
                cur->right = cur->left ;
                cur->left = NULL ;
            }

            cur = cur->right ;
        }
    }
    
};
