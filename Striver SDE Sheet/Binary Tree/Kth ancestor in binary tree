logic -> create root to node path -> go left of root...if node found then return 1...if NULL reached return 0....push node data to vector.....after returning from 
            left go right (if left return treu then no need to go right)....if anyone of left or right returned 1 then return 1....else pop from vector and return 0
      -> return size-k th element of path vector
      -> if k>n it means kth ancestor doesnt exist


bool solve(Node* root, int node, vector<int>& v)
{
    if(root == NULL)
        return 0 ;
        
    v.push_back(root->data) ;
        
    if(root->data == node)
        return 1 ;
        
    bool l=0, r=0 ;
    l = solve(root->left, node, v) ;
    
    if(!l)
        r = solve(root->right, node, v) ;
    
    if(l || r)
        return 1 ;
    
    v.pop_back() ;
    return 0 ;
    
}
int kthAncestor(Node *root, int k, int node)
{
    vector<int> path ;
    
    solve(root, node, path);
    int n = path.size();
    
    if(k >= n)
        return -1 ;
    
    return path[n-k-1] ;
}
