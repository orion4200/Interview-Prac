logic 1 -> merge the sorted arrays and find the median of the merged sorted array

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums2.size(), m = nums1.size() ;
        vector<int> num(n+m, 0) ;
        int i=0, j=0, k=0 ;

        while(i<m && j<n)
        {
            if(nums1[i] <= nums2[j])
                num[k++] = nums1[i++] ;
            else
                num[k++] = nums2[j++] ;
        }
        while(i<m)
            num[k++] = nums1[i++] ;
        
        while(j<n)
            num[k++] = nums2[j++] ;

        if((n+m)%2 != 0)
            return num[(n+m)/2] ;            
        
        return (double)(num[(n+m)/2] + num[(n+m)/2 - 1])/2 ;            // explicitly convert either the numerator or denomenator to double to get decimal value
        
    }
};


logic 2 -> nb


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums2.size(), m = nums1.size() ;
        if(n < m)
            return findMedianSortedArrays(nums2, nums1) ;                                              // if nums2 is smaller call fn for nums2 being the 1st arg

        int low = 0, high = m ;

        while(low <= high)
        {
            int cut1 = (low+high)/2 ;
            int cut2 = (n+m+1)/2 - cut1 ;

            int left1 = cut1 == 0 ? INT_MIN : nums1[cut1-1] ;
            int left2 = cut2 == 0 ? INT_MIN : nums2[cut2-1] ;

            int right1 = cut1 == m ? INT_MAX : nums1[cut1] ;
            int right2 = cut2 == n ? INT_MAX : nums2[cut2] ;

            if(left1 <= right2 && left2 <= right1)
            {
                if((n+m)%2 != 0)
                    return max(left1, left2) ;
                else
                    return (double)(max(left1, left2) + min(right1, right2))/2 ;
            }
            else if(left1 > right2)
                high = cut1 - 1 ;
            else
                low = cut1 + 1 ; 
        }

        return 0.0 ;
    }
};
