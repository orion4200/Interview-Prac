logic 1 -> naive appr
            use merging sorted array technique, keep a counter h for every el selected
            when h is equal to k, return the hth element

class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        int i=0, j=0, h=0 ;
        
        while(i<n && j<m)
        {
            if(arr1[i] <= arr2[j])
            {
                i++ ; h++ ;
                if(h == k)
                    return arr1[--i] ;            // for 0 based indexing, if i=0, h=0, and then i=1 and h=1, then it means we want el at 0th index (i.e. i=0) 
            }
            else
            {
                j++ ; h++ ;
                if(h == k)
                    return arr2[--j] ;
            }
        }
        
        while(i<n)
        {
            i++; h++ ;
            if(h == k)
                return arr1[--i] ;
        }
        while(j<m)
        {
            j++; h++ ;
            if(h == k)
                return arr2[--j] ;
        }
        
        return 0 ;
    }
};

logic 2 -> nb


class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(m<n)
            return kthElement(arr2, arr1, m, n, k) ;
            
        int low=max(0, k-m), high=min(k,n) ;                                                   // see reason in nb
        
        while(low <= high)
        {
            int cut1 = (low+high)/2 ;
            int cut2 = k - cut1 ;
            
            int left1 = cut1 == 0 ? INT_MIN : arr1[cut1-1] ;
            int left2 = cut2 == 0 ? INT_MIN : arr2[cut2-1] ;
            
            int right1 = cut1 == n ? INT_MAX : arr1[cut1] ;
            int right2 = cut2 == m ? INT_MAX : arr2[cut2] ;
            
            if(left1 <= right2 && left2 <= right1)
                return max(left1, left2) ;
            else if(left1 > right2)
                high = cut1 - 1 ;
            else
                low = cut1 + 1 ;
        }
        
        return 0 ;
    }
};
