class Solution {
public:
    void inorder(TreeNode* root, vector<int>& v)
    {
        if(root)
        {
            inorder(root->left, v);
            v.push_back(root->val) ;
            inorder(root->right, v) ;
        }
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> in ;
        inorder(root, in) ;                           //inorder traversal gives sorted array

        int i=0 ;
        while(k--) i++ ;                              // kth element from starting 

        return in[i-1] ;                            // due to 1-indexed
    }
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
space - o(1)



class Solution {
public:
    void inorder(TreeNode* root, int& k, int& ans)
    {
        if(!root) return ;

        inorder(root->left, k, ans) ;
        if(--k == 0)                                                //--k since we need kth smallest
        {    
            ans = root->val ;
            return ;
        }
        inorder(root->right, k, ans) ;

    }
    int kthSmallest(TreeNode* root, int k) {
        
        int ans = 0 ;
        inorder(root, k, ans) ;                             // inorder traversal till k becomes 0
        return ans ;
    }
};
