isValid logic -> nb

-------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    bool isvalid(vector<vector<char>> b, int i, int j, char c)
    {
        for(int k=0; k<9; k++)                                  
        {
            if(b[i][k] == c)                                        // for row
                return false ;
            
            if(b[k][j] == c)                                                    // for col
                return false ;

            if(b[3*(i/3) + k/3][3*(j/3) + k%3] == c)                       // for 3x3 block
                return false ;
        }
        return true ;
    }
    bool solve( vector<vector<char>>& b, int i, int j)
    {
        if(i == 9)                                                          // limit crossed
            return 1 ;
        if(j == 9)
            return solve(b, i+1, 0) ;                                         // move to next row, first col

        if(b[i][j] != '.')
            return solve(b, i, j+1) ;                                       // if already filled move to next cell
        
                
        for(char k='1'; k<='9'; k++)                            // check for all possible ans 1 to 9 for that cell
        {
            if(isvalid(b, i, j, k))                             // if that number is valid
            {
                b[i][j] = k ;                                   // fill cell with the number
                if(solve(b, i, j+1))                            // solve for next cell, if valid entry exists then return true
                    return true ;
                else
                    b[i][j] = '.' ;                                     // else erase current entry as one of the future cells has no valid entries
            }
        }
        return false ;                                          // backtrack
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board, 0, 0) ;
    }
};
