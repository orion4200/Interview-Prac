class Solution {
public:
    bool isqueen(int i, int j, vector<string> s, int n)
    {
        int it1 = i, it2 = j ;

        while(it2 >= 0)
        {
            if(s[it1][it2] == 'Q')
                return 0 ;
            it2-- ;
        }
        it1 = i ; it2 = j ;

        while(it1 >= 0 && it2 >= 0)
        {
            if(s[it1][it2] == 'Q')
                return 0 ;
            
            it1-- ; it2-- ;
        }

        it1 = i ; it2 = j ;

        while(it1 < n && it2 >= 0)
        {
            if(s[it1][it2] == 'Q')
                return 0 ;
            
            it1++ ; it2-- ;
        }

        return 1 ;
    }
    void solve(int j, int n, vector<string>& s, vector<vector<string>>& v)
    {
        if(j == n)
        {
            v.push_back(s) ;
            return ;
        }
        //int cur_pos = 0 ;
        for(int i=0; i<n; i++)
        {
            if(isqueen(i,j, s, n))
            {
                s[i][j] = 'Q' ;
                solve(j+1, n, s, v) ;
                s[i][j] = '.' ;
            }        
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res ;
        vector<string> cur ; string temp (n, '.') ;

        for(int i=0; i<n; i++)
        {
            cur.push_back(temp) ;
        }
        solve(0, n, cur, res) ;
        return res ;

    }
};
